#include <iostream>
#include <vector>
#include <stack>

using namespace std;

vector<vector<int> > components;

void input(int n,int arr[][2])
{
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < 2; j++)
        {
            cin >> arr[i][j];
        }
    }
}

void create_adjacency_matrix(int n, int m, int arr[][2], bool **arr2)
{
    for(int i =0; i < m; i++)
    {
        for(int j = 0; j < m; j++)
        {
            arr2[i][j] = 0;
        }
    }

    for(int i = 0; i < n; i++)
    {
        arr2[arr[i][0]][arr[i][1]] = 1;
        arr2[arr[i][1]][arr[i][0]] = 1;
    }
}

bool Is_Euler(vector<vector<int> >& adj_list,int n, bool **arr)
{
    if(components.size() > 1)
    {
        return false;
    }

    int counter = 0;
    int counter2 = 0;

    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            if(arr[i][j] == 1)
            {
                counter2++;
            }
        }

        if(counter2%2==1)
        {
            counter++;
            counter2 = 0;
        }
    }

    if(counter > 2)
    {
        return false;
    }

    return true;
}

void DFS(bool **arr, int n, int start, bool used[])
{
    used[start] = 1;
    components.back().push_back(start);
    
    for(int i = 1; i < n; i++)
    {
        if(arr[start][i] && !used[i])
        {
            DFS(arr,n,i,used);
        }
    }
}

void Find_path(vector<vector<int> >& adj_list,int n, bool **arr)
{

    int v = 0;

    int counter = 0;
    int counter2 = 0;

    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            if(arr[i][j] == 1)
            {
                counter2++;
            }
        }

         if(counter2%2==1)
         
        {
            v = i;
            break;
        }
    }

    for(unsigned int i = 0; i < adj_list.size(); i++)
    {
        if(adj_list[i].size()%2 == 1)
        {
            v = i;
            break;
        }
    }

    stack<int> _stack;
    
    _stack.push(v);

    while(!_stack.empty())
    {
        int p = _stack.top();
        
        for(int i = 0; i < n; i++)
        {
            if(arr[p][i] == 1)
            {
                _stack.push(i);
                arr[p][i] = 0;
                arr[i][p] = 0;
                
                break;
            }
        }

        if(p == _stack.top())
        {
            _stack.pop();
            cout << p << " ";
        }
    }
}

int main()
{
    int NumberOfVerticies;
    int NumberOfRibs;
    cin >> NumberOfVerticies;
    cin >> NumberOfRibs;

    if(NumberOfRibs == 0 || NumberOfVerticies == 0)
    {
        return 0;
    }

    vector<vector<int> > AdjacencyList(NumberOfVerticies);
    
    int EdgeList[NumberOfRibs][2];
    
    bool **AdjacencyMatrix = new bool*[NumberOfVerticies];

    for(int i = 0; i < NumberOfVerticies; i++)
    {
        AdjacencyMatrix[i] = new bool[NumberOfVerticies];
    }

    input(NumberOfRibs, EdgeList);

    create_adjacency_matrix(NumberOfRibs, NumberOfVerticies, EdgeList, AdjacencyMatrix);

    bool used[NumberOfVerticies];

    for(int i = 0; i < NumberOfVerticies; i++)
    {
        used[i] = 0;
    }

    for(int i = 0; i < NumberOfVerticies; i++)
    {
        if(!used[i])
        {
            components.push_back(vector<int>());
            DFS(AdjacencyMatrix, NumberOfVerticies, i, used);
    }
    }

    if(Is_Euler(AdjacencyList,NumberOfVerticies, AdjacencyMatrix))
    {
        Find_path(AdjacencyList,NumberOfVerticies, AdjacencyMatrix);
    }

    else
    {
        return 0;
    }

    for (int i = 0; i < NumberOfVerticies; i++)
    {
        delete[] AdjacencyMatrix[i];
    }

    return 0;
}
